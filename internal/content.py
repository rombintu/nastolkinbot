from datetime import datetime as dt
from random import choice
import os, json
from loguru import logger as log

log.level("DEBUG")
admin = "rombintu"
src_link = "https://github.com/rombintu/nastolkinbot"
commands = [
    "/create - –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É",
    "/games - –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä"
    "/info -–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ" 
]

messages = {
    "start" : f"""–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –¥—Ä—É–∑—å—è–º–∏ /games
–°–æ–∑–¥–∞–≤–∞–π –∏–≥—Ä—É /create –∏ –∑–æ–≤–∏ –¥—Ä—É–∑–µ–π 
–°–æ–∑–¥–∞–π —Å–≤–æ–π –ø–∞–∫! /mypacks
    
    –ü—Ä–∏ –ø–æ–ª–æ–º–∫–µ –ø–∏—à–∏ @{admin}
    *–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∏–≥–¥–µ –Ω–µ —Ö—Ä–∞–Ω—è—Ç—Å—è, —Ç–æ–ª—å–∫–æ —Å–±–æ—Ä–∫–∏*"""
}

# ERRORS
error = {
    "500": "–û—à–∏–±–∫–∞ 500: `{description}`\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @{admin}",
    "database": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç",
    "no_data" : "–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä\n/create - –°–æ–∑–¥–∞–π —Å–∞–º!",
}

already_play = "–í—ã —É–∂–µ —É—á–∞–≤—Å—Ç–≤—É–µ—Ç–µ –≤ –¥—Ä—É–≥–æ–π –∏–≥—Ä–µ /info"
devtodo = "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ —á—Ç–æ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ. –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
game_not_found = "–≠—Ç–æ–π –∏–≥—Ä—ã: {}, —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
game_full_players = "–ò–≥—Ä–∞: {} –∑–∞–ø–æ–ª–Ω–µ–Ω–∞"
game_to_play = "–ò–≥—Ä–∞: {} —É–∂–µ –∏–¥–µ—Ç"
not_playing = "–í—ã –Ω–µ —É—á–∞–≤—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ: {}\n/games"
game_join = "üé≤ *–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è*"
pack_help = "–û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ–∞–π–ª –±—É–¥–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è —Å—Ç—Ä–æ—á–∫–∞–º–∏"
pack_error = "–°–±–æ—Ä–∫–∞ [{}] –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–∞, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–π –µ–µ /mypacks\n{}"
            

def get_last_update_format():
    return f"\n\t{dt.now().strftime('%d %B –≤ %H:%M:%S')}"

def get_content(filename, packs=False):
    path = os.path.join(os.getcwd(), filename)
    if packs:
        path = os.path.join(os.getcwd(), "packs", filename)
    try:
        with open(path, "r") as f:
            return f.read().splitlines()
    except Exception as err:
        log.debug(err)
        return []
class Pack:
    def __init__(self, title, owner, game_type, filename, new=False):
        self.title = title
        self.owner = owner
        self.game_type = game_type
        self.filename = filename
        if new:
            self.questions = []
        else:
            self.questions = self.get_questions() 
        
    
    def get_questions(self):
        return get_content(self.filename, packs=True)

    def get_size(self):
        self.questions = self.get_questions() 
        return len(self.questions)

    def get_question(self, round):
        return self.questions[round]

    def get_rand_question(self):
        return choice(self.questions)

    def get_file(self):
        return open(os.path.join(os.getcwd(), "packs", self.filename), "rb")

    def delete(self):
        try:
            os.remove(os.path.join(os.getcwd(), "packs", self.filename))
        except Exception as err:
            log.debug(err)

def get_all_packs():
    packs = []
    with open(os.path.join(os.getcwd(), 'packs.json'), "r") as json_file:
        for pack in json.load(json_file):
            packs.append(Pack(
                pack["title"],
                pack["owner"],
                pack["game_type"],
                pack["filename"],
            ))
    return packs        

def update_pack_file(packs):
    js_data = []
    for pack in packs:
        js_data.append(
            {
                "title": pack.title,
                "game_type": pack.game_type,
                "owner": pack.owner,
                "filename": pack.filename,
            }
        )
    with open(os.path.join(os.getcwd(), 'packs.json'), "w") as json_file:
        json_file.write(json.dumps(js_data, indent=4))

def create_new_pack(packs, data):
    js_data = []
    for pack in packs:
        js_data.append(
            {
                "title": pack.title,
                "game_type": pack.game_type,
                "owner": pack.owner,
                "filename": pack.filename,
            }
        )
    with open(os.path.join(os.getcwd(), 'packs.json'), "w") as json_file:
        json_file.write(json.dumps(js_data, indent=4))
    with open(os.path.join(os.getcwd(), 'packs', pack.filename), "wb") as data_file:
        data_file.write(data)

types_game = [
    ["–°–º–µ—ÖüòÅ—ë—á–∫–∏", "–ö–∞—Ä–æ—á–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å —Å–º–µ—à–Ω—ã–µ —Ñ—Ä–∞–∑—ã –≤ –ø—Ä–æ–ø—É—Å–∫–∏, —Ä–∞–∑–±–µ—Ä–µ—à—å—Å—è"]
]

def get_game_type(game_type_name):
    for i, t in  enumerate(types_game):
        if t[0] == game_type_name:
            return i
    return -1

nicknames = get_content("nicknames.txt")